{"version":3,"sources":["../webpack/bootstrap","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","WebWorkers/workerCom.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_defineProperty","obj","configurable","writable","ownKeys","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","state","animate","AlgoStartTime","CleanGrid","size","graph","j","sleep","milliseconds","date","Date","now","currentDate","pause","currenttime","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","GetNeighbours","portal1","portal2","ActivePortal","neighbours","DepthFirstSearchIterative","start","stack","skip","CurrentNode","FinalPath","isFinalPath","node","idx","some","item","arr","postMessage","type","payload","JSON","stringify","pop","BreathFirstSearch","distanceMap","row","Completed","queue","shift","PreviousNode","unshift","MinhuristicValue","min","minNode","distance","fh","abs","boundary","gh","sqrt","othergh","GetDistance","Astart","GreedyMinhuristicValue","GreedyGetDistance","GreedyBFS","Bridge","action","data","parse","Algo","theme","algo","ExploreGraphAnimate","map","ExploreGraphInstantaly","clearInterval","interval","onmessage","event"],"mappings":"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","file":"a7ed9bd9bd44e46065d9.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/AlgoVis/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { Switch } from \"@material-ui/core\";\r\n\r\n// export default function Worker() {\r\n// MessageType for Workers\r\nconst CurrentState = \"CurrentState\";\r\nconst ConsoleLog = \"ConsoleLog\";\r\nconst CheckState = \"CheckState\";\r\nconst SetExploredNodes = \"SetExploredNodes\";\r\nconst FixExploredNodes = \"FixExploredNodes\";\r\nconst Start = \"Start\";\r\nconst Stop = \"Stop\";\r\nconst Finished = \"Finished\";\r\nconst InstantAlgo = \"InstantAlgo\";\r\nconst SetFinalPath = \"SetFinalPath\";\r\nconst FixFinalPath = \"FixFinalPath\";\r\nconst FixGrid = \"FixGrid\";\r\n// Graph States\r\n// ----------------------------------------------------------------\r\nconst BlankNode = 0;\r\n// Wall and transition\r\nconst Wall = 1;\r\nconst WallTransition = 2;\r\n// Start and end Node\r\nconst StartNode = 3;\r\nconst TargetNode = 4;\r\n// Explored Node and Transition\r\nconst ExploredNode = 5;\r\nconst ExploredNodeTransition = 6;\r\n// Final Path Node\r\nconst PathNode = 7;\r\nconst PathNodeTransition = 8;\r\n// Portal Node\r\nconst PortalNode1 = 9;\r\nconst PortalNode2 = 10;\r\n\r\n// NoNode\r\nconst NoNode = -1;\r\n// ----------------------------------------------------------------\r\n\r\n// State\r\nlet state;\r\nlet interval;\r\nlet animate = false;\r\nlet AlgoStartTime = null;\r\n// ClearGrid\r\nconst CleanGrid = () => {\r\n  const size = state.graph.size;\r\n  for (let i = 0; i < size; i++) {\r\n    for (let j = 0; j < size; j++) {\r\n      if (\r\n        state.graph.graph[i][j] == ExploredNode ||\r\n        state.graph.graph[i][j] == PathNode ||\r\n        state.graph.graph[i][j] == PathNodeTransition\r\n      ) {\r\n        state.graph.graph[i][j] = BlankNode;\r\n      }\r\n    }\r\n  }\r\n};\r\n// sleep for animation\r\nfunction sleep(milliseconds) {\r\n  const date = Date.now();\r\n  let currentDate = null;\r\n  do {\r\n    currentDate = Date.now();\r\n  } while (currentDate - date < milliseconds);\r\n}\r\nconst pause = () => {\r\n  const currenttime = Date.now();\r\n  if (currenttime - AlgoStartTime < 20000) {\r\n    sleep(70);\r\n  } else if (currenttime - AlgoStartTime < 40000) {\r\n    sleep(10);\r\n  }\r\n};\r\n// Shuffel\r\nfunction shuffle(array) {\r\n  var currentIndex = array.length,\r\n    temporaryValue,\r\n    randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n// returns an array of 6 neighbours;\r\nconst GetNeighbours = ({ i, j, length }) => {\r\n  const portal1 = state.graph.portal1;\r\n  const portal2 = state.graph.portal2;\r\n  const portalavailable = state.graph.ActivePortal;\r\n  if (portalavailable) {\r\n    if (i == portal1.i && j == portal1.j) {\r\n      i = portal2.i;\r\n      j = portal2.j;\r\n      // console.log(CurrentNode, \"portal\");\r\n    } else if (i == portal2.i && j == portal2.j) {\r\n      // console.log({ i, j }, \"this\");\r\n      i = portal1.i;\r\n      j = portal1.j;\r\n      // console.log({ i, j }, \"to this\");\r\n    }\r\n  }\r\n  let neighbours = [];\r\n  neighbours.push({ i, j: (j + length - 1) % length });\r\n  neighbours.push({ i, j: (j + 1) % length });\r\n  neighbours.push({ i: (i + length - 1) % length, j });\r\n  neighbours.push({ i: (i + 1) % length, j });\r\n\r\n  if (i % 2 != 0) {\r\n    neighbours.push({\r\n      i: (i + length - 1) % length,\r\n      j: (j + length - 1) % length,\r\n    });\r\n    neighbours.push({\r\n      i: (i + length + 1) % length,\r\n      j: (j + length - 1) % length,\r\n    });\r\n  } else {\r\n    neighbours.push({\r\n      i: (i + length - 1) % length,\r\n      j: (j + length + 1) % length,\r\n    });\r\n    neighbours.push({\r\n      i: (i + length + 1) % length,\r\n      j: (j + length + 1) % length,\r\n    });\r\n  }\r\n\r\n  return neighbours;\r\n};\r\n\r\n// Iterative Version of DFS\r\nconst DepthFirstSearchIterative = () => {\r\n  const graph = state.graph.graph;\r\n  const length = state.graph.size;\r\n  const start = state.graph.start;\r\n  const target = state.graph.target;\r\n  let stack = [start];\r\n  let skip = false;\r\n  while (stack.length != 0) {\r\n    skip = false;\r\n    let CurrentNode = stack[stack.length - 1];\r\n    if (CurrentNode.i == target.i && CurrentNode.j == target.j) {\r\n      return {\r\n        FinalPath: stack,\r\n        isFinalPath: stack.length != 0,\r\n      };\r\n    }\r\n    let neighbours = GetNeighbours({ ...CurrentNode, length });\r\n    neighbours = shuffle(neighbours);\r\n\r\n    neighbours.forEach((node, idx) => {\r\n      const { i, j } = node;\r\n      // console.log(node);\r\n      if (!skip) {\r\n        if (graph[i][j] != ExploredNode && graph[i][j] != Wall) {\r\n          if (\r\n            graph[i][j] != StartNode &&\r\n            graph[i][j] != TargetNode &&\r\n            graph[i][j] != PortalNode1 &&\r\n            graph[i][j] != PortalNode2\r\n          ) {\r\n            graph[i][j] = ExploredNode;\r\n          }\r\n          if (!stack.some((item) => item.i == node.i && item.j == node.j)) {\r\n            stack.push(node);\r\n\r\n            skip = true;\r\n            if (animate) {\r\n              let arr = [node];\r\n              postMessage({\r\n                type: SetExploredNodes,\r\n                payload: JSON.stringify({ arr }),\r\n              });\r\n\r\n              pause();\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    if (!skip) {\r\n      stack.pop();\r\n    }\r\n  }\r\n  return {\r\n    FinalPath: stack,\r\n    isFinalPath: stack.length != 0,\r\n  };\r\n};\r\nconst BreathFirstSearch = () => {\r\n  const graph = state.graph.graph;\r\n  const distanceMap = [];\r\n  const length = state.graph.size;\r\n\r\n  // distanceMap.map((row) => {\r\n  //   return row.map((cell) => -1);\r\n  // });\r\n  for (let i = 0; i < length; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < length; j++) {\r\n      row.push({ i: -1, j: -1 });\r\n    }\r\n    distanceMap.push([...row]);\r\n  }\r\n  const start = state.graph.start;\r\n  const target = state.graph.target;\r\n  let Completed = false;\r\n  let queue = [start];\r\n  distanceMap[start.i][start.j] = start;\r\n  const portal1 = state.graph.portal1;\r\n  const portal2 = state.graph.portal2;\r\n\r\n  while (queue.length != 0 && !Completed) {\r\n    // console.log(queue);\r\n\r\n    let CurrentNode = queue.shift();\r\n\r\n    if (CurrentNode.i == target.i && CurrentNode.j == target.j) {\r\n      Completed = true;\r\n    } else {\r\n      if (animate) {\r\n        let arr = [CurrentNode];\r\n        postMessage({\r\n          type: SetExploredNodes,\r\n          payload: JSON.stringify({ arr }),\r\n        });\r\n        pause();\r\n      }\r\n\r\n      const neighbours = GetNeighbours({ ...CurrentNode, length });\r\n      // console.log(neighbours);\r\n      neighbours.forEach(({ i, j }, idx) => {\r\n        if (graph[i][j] != ExploredNode && graph[i][j] != Wall) {\r\n          if (\r\n            graph[i][j] != StartNode &&\r\n            graph[i][j] != TargetNode &&\r\n            graph[i][j] != PortalNode1 &&\r\n            graph[i][j] != PortalNode2\r\n          ) {\r\n            graph[i][j] = ExploredNode;\r\n          }\r\n          if (distanceMap[i][j].i == -1) {\r\n            distanceMap[i][j] = CurrentNode;\r\n          }\r\n\r\n          queue.push({ i, j });\r\n        }\r\n      });\r\n    }\r\n  }\r\n  let CurrentNode = distanceMap[target.i][target.j];\r\n  let FinalPath = [];\r\n  // distance = distanceMap[CurrentNode.i][CurrentNode.j];\r\n  // console.log(distanceMap);\r\n  let Break = true;\r\n  let PreviousNode = { i: -1, j: -1 };\r\n  while (\r\n    !(CurrentNode.i == PreviousNode.i && CurrentNode.j == PreviousNode.j)\r\n  ) {\r\n    FinalPath.unshift(CurrentNode);\r\n    PreviousNode.i = CurrentNode.i;\r\n    PreviousNode.j = CurrentNode.j;\r\n    CurrentNode = distanceMap[CurrentNode.i][CurrentNode.j];\r\n  }\r\n\r\n  return { FinalPath, isFinalPath: FinalPath.length != 0 };\r\n};\r\n\r\nconst GetDistance = ({ i, j }) => {\r\n  const target = state.graph.target;\r\n  const start = state.graph.start;\r\n  const fh = Math.abs(start.i - i) + Math.abs(start.j - j);\r\n  const boundary = state.graph.boundary;\r\n  const size = state.graph.size;\r\n  // const fh = 0;\r\n  let gh = Math.sqrt((target.i - i) ** 2 + (target.j - j) ** 2);\r\n  let othergh = -1;\r\n  if (!boundary) {\r\n    othergh = Math.sqrt(\r\n      (target.i - i + size) ** 2 + (target.j - j + size) ** 2\r\n    );\r\n    // console.log(gh, othergh);\r\n    gh = Math.min(gh, othergh);\r\n  }\r\n  return fh + gh * 2;\r\n};\r\nconst MinhuristicValue = (queue) => {\r\n  let min = -1;\r\n  let minNode = { i: 0, j: 0 };\r\n  queue.forEach((node) => {\r\n    let distance = GetDistance(node);\r\n    if (distance < min || min == -1) {\r\n      min = distance;\r\n      minNode = node;\r\n    }\r\n  });\r\n  return minNode;\r\n};\r\nconst Astart = () => {\r\n  const graph = state.graph.graph;\r\n  const distanceMap = [];\r\n  const length = state.graph.size;\r\n\r\n  // distanceMap.map((row) => {\r\n  //   return row.map((cell) => -1);\r\n  // });\r\n  for (let i = 0; i < length; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < length; j++) {\r\n      row.push({ i: -1, j: -1 });\r\n    }\r\n    distanceMap.push([...row]);\r\n  }\r\n  const start = state.graph.start;\r\n  const target = state.graph.target;\r\n  let Completed = false;\r\n  let queue = [start];\r\n  distanceMap[start.i][start.j] = start;\r\n  const portal1 = state.graph.portal1;\r\n  const portal2 = state.graph.portal2;\r\n\r\n  while (queue.length != 0 && !Completed) {\r\n    // console.log(queue);\r\n\r\n    // let CurrentNode = queue.shift();\r\n    let CurrentNode = MinhuristicValue(queue);\r\n    queue = queue.filter((node) => {\r\n      return node.i != CurrentNode.i || node.j != CurrentNode.j;\r\n    });\r\n    if (CurrentNode.i == target.i && CurrentNode.j == target.j) {\r\n      Completed = true;\r\n    } else {\r\n      if (animate) {\r\n        let arr = [CurrentNode];\r\n        postMessage({\r\n          type: SetExploredNodes,\r\n          payload: JSON.stringify({ arr }),\r\n        });\r\n        pause();\r\n      }\r\n      // graph[CurrentNode.i][CurrentNode.j] = ExploredNode;\r\n\r\n      const neighbours = GetNeighbours({ ...CurrentNode, length });\r\n      // console.log(neighbours);\r\n      neighbours.forEach(({ i, j }, idx) => {\r\n        if (graph[i][j] != ExploredNode && graph[i][j] != Wall) {\r\n          // if (!queue.includes({ i, j }) && graph[i][j] != Wall) {\r\n          if (\r\n            graph[i][j] != StartNode &&\r\n            graph[i][j] != TargetNode &&\r\n            graph[i][j] != PortalNode1 &&\r\n            graph[i][j] != PortalNode2\r\n          ) {\r\n            graph[i][j] = ExploredNode;\r\n          }\r\n          if (distanceMap[i][j].i == -1) {\r\n            distanceMap[i][j] = CurrentNode;\r\n          }\r\n\r\n          queue.push({ i, j });\r\n        }\r\n      });\r\n    }\r\n  }\r\n  let CurrentNode = distanceMap[target.i][target.j];\r\n  let FinalPath = [];\r\n  // distance = distanceMap[CurrentNode.i][CurrentNode.j];\r\n  // console.log(distanceMap);\r\n  let Break = true;\r\n  let PreviousNode = { i: -1, j: -1 };\r\n  while (\r\n    !(CurrentNode.i == PreviousNode.i && CurrentNode.j == PreviousNode.j)\r\n  ) {\r\n    FinalPath.unshift(CurrentNode);\r\n    PreviousNode.i = CurrentNode.i;\r\n    PreviousNode.j = CurrentNode.j;\r\n    CurrentNode = distanceMap[CurrentNode.i][CurrentNode.j];\r\n  }\r\n\r\n  return { FinalPath, isFinalPath: FinalPath.length != 0 };\r\n};\r\n\r\nconst GreedyGetDistance = ({ i, j }) => {\r\n  const target = state.graph.target;\r\n  const start = state.graph.start;\r\n  // const fh = Math.abs(start.i - i) + Math.abs(start.j - j);\r\n  const boundary = state.graph.boundary;\r\n  const size = state.graph.size;\r\n  // const fh = 0;\r\n  let gh = Math.sqrt((target.i - i) ** 2 + (target.j - j) ** 2);\r\n  let othergh = -1;\r\n  if (!boundary) {\r\n    othergh = Math.sqrt(\r\n      (target.i - i + size) ** 2 + (target.j - j + size) ** 2\r\n    );\r\n    // console.log(gh, othergh);\r\n    gh = Math.min(gh, othergh);\r\n  }\r\n  return gh;\r\n};\r\nconst GreedyMinhuristicValue = (queue) => {\r\n  let min = -1;\r\n  let minNode = { i: 0, j: 0 };\r\n  queue.forEach((node) => {\r\n    let distance = GreedyGetDistance(node);\r\n    if (distance < min || min == -1) {\r\n      min = distance;\r\n      minNode = node;\r\n    }\r\n  });\r\n  return minNode;\r\n};\r\nconst GreedyBFS = () => {\r\n  const graph = state.graph.graph;\r\n  const distanceMap = [];\r\n  const length = state.graph.size;\r\n\r\n  // distanceMap.map((row) => {\r\n  //   return row.map((cell) => -1);\r\n  // });\r\n  for (let i = 0; i < length; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < length; j++) {\r\n      row.push({ i: -1, j: -1 });\r\n    }\r\n    distanceMap.push([...row]);\r\n  }\r\n  const start = state.graph.start;\r\n  const target = state.graph.target;\r\n  let Completed = false;\r\n  let queue = [start];\r\n  distanceMap[start.i][start.j] = start;\r\n  const portal1 = state.graph.portal1;\r\n  const portal2 = state.graph.portal2;\r\n\r\n  while (queue.length != 0 && !Completed) {\r\n    // console.log(queue);\r\n\r\n    // let CurrentNode = queue.shift();\r\n    let CurrentNode = GreedyMinhuristicValue(queue);\r\n    queue = queue.filter((node) => {\r\n      return node.i != CurrentNode.i || node.j != CurrentNode.j;\r\n    });\r\n    if (CurrentNode.i == target.i && CurrentNode.j == target.j) {\r\n      Completed = true;\r\n    } else {\r\n      if (animate) {\r\n        let arr = [CurrentNode];\r\n        postMessage({\r\n          type: SetExploredNodes,\r\n          payload: JSON.stringify({ arr }),\r\n        });\r\n        pause();\r\n      }\r\n      // graph[CurrentNode.i][CurrentNode.j] = ExploredNode;\r\n\r\n      const neighbours = GetNeighbours({ ...CurrentNode, length });\r\n      // console.log(neighbours);\r\n      neighbours.forEach(({ i, j }, idx) => {\r\n        if (graph[i][j] != ExploredNode && graph[i][j] != Wall) {\r\n          // if (!queue.includes({ i, j }) && graph[i][j] != Wall) {\r\n          if (\r\n            graph[i][j] != StartNode &&\r\n            graph[i][j] != TargetNode &&\r\n            graph[i][j] != PortalNode1 &&\r\n            graph[i][j] != PortalNode2\r\n          ) {\r\n            graph[i][j] = ExploredNode;\r\n          }\r\n          if (distanceMap[i][j].i == -1) {\r\n            distanceMap[i][j] = CurrentNode;\r\n          }\r\n\r\n          queue.push({ i, j });\r\n        }\r\n      });\r\n    }\r\n  }\r\n  let CurrentNode = distanceMap[target.i][target.j];\r\n  let FinalPath = [];\r\n  // distance = distanceMap[CurrentNode.i][CurrentNode.j];\r\n  // console.log(distanceMap);\r\n  let Break = true;\r\n  let PreviousNode = { i: -1, j: -1 };\r\n  while (\r\n    !(CurrentNode.i == PreviousNode.i && CurrentNode.j == PreviousNode.j)\r\n  ) {\r\n    FinalPath.unshift(CurrentNode);\r\n    PreviousNode.i = CurrentNode.i;\r\n    PreviousNode.j = CurrentNode.j;\r\n    CurrentNode = distanceMap[CurrentNode.i][CurrentNode.j];\r\n  }\r\n\r\n  return { FinalPath, isFinalPath: FinalPath.length != 0 };\r\n};\r\nconst ExploreGraphAnimate = () => {\r\n  const graph = state.graph.graph;\r\n  const length = state.graph.size;\r\n  AlgoStartTime = Date.now();\r\n  const Algo = state.theme.algo;\r\n  const portal1 = state.graph.portal1;\r\n  const portal2 = state.graph.portal2;\r\n  // console.log(portal1, portal2);\r\n  animate = true;\r\n  let FinalPath = [];\r\n  let isFinalPath = false;\r\n  switch (Algo) {\r\n    case \"Astar\": {\r\n      const { FinalPath: path, isFinalPath: ispath } = Astart();\r\n      FinalPath = path;\r\n      isFinalPath = ispath;\r\n      break;\r\n    }\r\n    case \"BFS\": {\r\n      const { FinalPath: path, isFinalPath: ispath } = BreathFirstSearch();\r\n      FinalPath = path;\r\n      isFinalPath = ispath;\r\n      break;\r\n    }\r\n    case \"DFS\": {\r\n      const {\r\n        FinalPath: path,\r\n        isFinalPath: ispath,\r\n      } = DepthFirstSearchIterative();\r\n      FinalPath = path;\r\n      isFinalPath = ispath;\r\n      break;\r\n    }\r\n    case \"GreedyBFS\": {\r\n      const { FinalPath: path, isFinalPath: ispath } = GreedyBFS();\r\n      FinalPath = path;\r\n      isFinalPath = ispath;\r\n      break;\r\n    }\r\n  }\r\n\r\n  animate = false;\r\n  let index = 0;\r\n  let flag = 0;\r\n  if (isFinalPath) {\r\n    let idx = 0;\r\n    if (FinalPath.length < 20) {\r\n      while (idx < FinalPath.length) {\r\n        let arr = [FinalPath[idx]];\r\n        postMessage({\r\n          type: SetFinalPath,\r\n          payload: JSON.stringify({ arr }),\r\n        });\r\n        pause();\r\n        idx++;\r\n      }\r\n    } else {\r\n      postMessage({\r\n        type: SetFinalPath,\r\n        payload: JSON.stringify({ arr: FinalPath }),\r\n      });\r\n    }\r\n  }\r\n};\r\nconst ExploreGraphInstantaly = () => {\r\n  const graph = state.graph.graph;\r\n  const length = state.graph.size;\r\n  // const { FinalPath, isFinalPath } = DepthFirstSearchIterative();\r\n  // const { FinalPath, isFinalPath } = BreathFirstSearch();\r\n  // const { FinalPath, isFinalPath } = Astart();\r\n  let FinalPath = [];\r\n  let isFinalPath = false;\r\n  const Algo = state.theme.algo;\r\n\r\n  switch (Algo) {\r\n    case \"Astar\": {\r\n      const { FinalPath: path, isFinalPath: ispath } = Astart();\r\n      FinalPath = path;\r\n      isFinalPath = ispath;\r\n      break;\r\n    }\r\n    case \"BFS\": {\r\n      const { FinalPath: path, isFinalPath: ispath } = BreathFirstSearch();\r\n      FinalPath = path;\r\n      isFinalPath = ispath;\r\n      break;\r\n    }\r\n    case \"DFS\": {\r\n      const {\r\n        FinalPath: path,\r\n        isFinalPath: ispath,\r\n      } = DepthFirstSearchIterative();\r\n      FinalPath = path;\r\n      isFinalPath = ispath;\r\n      break;\r\n    }\r\n    case \"GreedyBFS\": {\r\n      const { FinalPath: path, isFinalPath: ispath } = GreedyBFS();\r\n      FinalPath = path;\r\n      isFinalPath = ispath;\r\n      break;\r\n    }\r\n  }\r\n  if (isFinalPath) {\r\n    FinalPath.map(({ i, j }) => {\r\n      if (\r\n        graph[i][j] != StartNode &&\r\n        graph[i][j] != TargetNode &&\r\n        graph[i][j] != PortalNode1 &&\r\n        graph[i][j] != PortalNode2\r\n      ) {\r\n        graph[i][j] = PathNode;\r\n      }\r\n    });\r\n  }\r\n\r\n  postMessage({\r\n    type: FixGrid,\r\n    payload: JSON.stringify(graph),\r\n  });\r\n};\r\n\r\nconst Bridge = (action) => {\r\n  // eslint-disable-line no-restricted-globals\r\n  if (!action) return;\r\n  const { type, payload } = action.data;\r\n  switch (type) {\r\n    case \"Hello\": {\r\n      postMessage({ type: \"Hello\", payload: \"Hello From Worker\" });\r\n      break;\r\n    }\r\n    case CurrentState: {\r\n      state = JSON.parse(payload);\r\n      break;\r\n    }\r\n\r\n    case Start: {\r\n      state = JSON.parse(payload);\r\n      CleanGrid();\r\n      postMessage({\r\n        type: FixGrid,\r\n        payload: JSON.stringify(state.graph.graph),\r\n      });\r\n      postMessage({ type: ConsoleLog, payload: \"Started Algo\" });\r\n      // ClearGrid();\r\n      ExploreGraphAnimate();\r\n      break;\r\n    }\r\n    case InstantAlgo: {\r\n      state = JSON.parse(payload);\r\n      state.graph.graph[state.graph.start.i][state.graph.start.j] = StartNode;\r\n      state.graph.graph[state.graph.target.i][\r\n        state.graph.target.j\r\n      ] = TargetNode;\r\n      // console.log(\r\n      //   state.graph.graph[state.graph.target.i][state.graph.target.j]\r\n      // );\r\n      postMessage({ type: ConsoleLog, payload: \"Instant Algo Called\" });\r\n      CleanGrid();\r\n      ExploreGraphInstantaly();\r\n      postMessage({ type: ConsoleLog, payload: \"Algo Completed\" });\r\n      // postMessage({ type: ConsoleLog, payload: \"Stop Algo\" });\r\n      // postMessage({ type: Finished, payload: \"Finished Algo\" });\r\n      break;\r\n    }\r\n\r\n    case Stop: {\r\n      animate = false;\r\n      clearInterval(interval);\r\n      postMessage({ type: ConsoleLog, payload: \"Stop Algo\" });\r\n      postMessage({ type: Stop, payload: \"Stop Algo\" });\r\n      break;\r\n    }\r\n    case ConsoleLog: {\r\n      postMessage({ type: ConsoleLog, payload: \"Received Log\" });\r\n      break;\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return;\r\n};\r\n// }\r\n// addEventListener(\"message\", Bridge);\r\nonmessage = (event) => {\r\n  Bridge(event);\r\n};\r\n"],"sourceRoot":""}