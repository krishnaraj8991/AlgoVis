{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","components/Hive/MemorisexHex.jsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","MemorisexHex","props","j","LeftButtonDown","remainingProps","DataSize1","useSelector","state","graph","size","val","BlankNode","shallowEqual","movingStart","movingTarget","movingPortal1","movingPortal2","animation","theme","dispatch","animationSpeed","useDispatch","HexRef","useRef","EventHandler","MoveStartTo","MoveTargetTo","MovePortal1To","MovePortal2To","ExploredNodeTransition","ExploredNode","PathNode","PathNodeTransition","SetAsWall","FixAsWall","WallTransition","Wall","RemoveWall","useEffect","endTime","Date","getTime","window","requestAnimationFrame","AnimationTimeout","onMouseOver","e","current","className","onMouseDown","button","tagName","StartNode","console","log","MoveingStart","TargetNode","MoveingTarget","PortalNode1","MoveingPortal1","PortalNode2","MoveingPortal2","onMouseUp","Hex","Ref"],"mappings":"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","file":"static/js/3.76a509c6.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, { useEffect, useRef } from \"react\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  FixAsWall,\r\n  RemoveWall,\r\n  SetAsWall,\r\n  MoveingStart,\r\n  MoveingTarget,\r\n  MoveStartTo,\r\n  MoveTargetTo,\r\n  SetAsExplored,\r\n  FixAsExplored,\r\n  MoveingPortal1,\r\n  MoveingPortal2,\r\n  MovePortal1To,\r\n  MovePortal2To,\r\n} from \"../../redux/graph/graphActions\";\r\nimport {\r\n  BlankNode,\r\n  ExploredNode,\r\n  ExploredNodeTransition,\r\n  NoNode,\r\n  PathNode,\r\n  PathNodeTransition,\r\n  PortalNode1,\r\n  PortalNode2,\r\n  StartNode,\r\n  TargetNode,\r\n  Wall,\r\n  WallTransition,\r\n} from \"../../redux/graph/graphStates\";\r\nimport Hex from \"./Hex\";\r\nfunction MemorisexHex(props) {\r\n  const { i, j, LeftButtonDown, ...remainingProps } = props;\r\n\r\n  const DataSize1 = useSelector((state) => state.graph.size);\r\n  const val = useSelector((state) => {\r\n    if (i < DataSize1 && j < DataSize1) {\r\n      return state.graph.graph[i][j];\r\n    }\r\n    return BlankNode;\r\n  }, shallowEqual);\r\n  let { movingStart, movingTarget } = useSelector(\r\n    (state) => ({\r\n      movingStart: state.graph.movingStart,\r\n      movingTarget: state.graph.movingTarget,\r\n    }),\r\n    shallowEqual\r\n  );\r\n  let { movingPortal1, movingPortal2 } = useSelector(\r\n    (state) => ({\r\n      movingPortal1: state.graph.movingPortal1,\r\n      movingPortal2: state.graph.movingPortal2,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  const animation = useSelector((state) => state.theme.animation);\r\n  const Speed = useSelector(\r\n    (state) => state.theme.animationSpeed,\r\n    shallowEqual\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const HexRef = useRef(null);\r\n\r\n  const EventHandler = () => {\r\n    if (movingStart) {\r\n      dispatch(MoveStartTo({ i, j }));\r\n      // console.log(\"movnig\");\r\n    } else if (movingTarget) {\r\n      dispatch(MoveTargetTo({ i, j }));\r\n    } else if (movingPortal1) {\r\n      dispatch(MovePortal1To({ i, j }));\r\n    } else if (movingPortal2) {\r\n      dispatch(MovePortal2To({ i, j }));\r\n    } else {\r\n      if (\r\n        val == BlankNode ||\r\n        val == ExploredNodeTransition ||\r\n        val == ExploredNode ||\r\n        val == PathNode ||\r\n        val == PathNodeTransition\r\n      ) {\r\n        if (animation) {\r\n          dispatch(SetAsWall({ i, j }));\r\n        } else {\r\n          dispatch(FixAsWall({ i, j }));\r\n          // dispatch(FixAsExplored({ i, j }));\r\n        }\r\n      } else if (val == WallTransition || val == Wall) {\r\n        dispatch(RemoveWall({ i, j }));\r\n      }\r\n      // else if (val == ExploredNodeTransition || val == ExploredNode) {\r\n      //   dispatch(RemoveWall({ i, j }));\r\n      // }\r\n    }\r\n  };\r\n  const ClickHandler = () => {\r\n    // console.log(i, \",\", j, \"clicked\", val);\r\n    EventHandler();\r\n  };\r\n  const OverHandler = (e) => {\r\n    if (LeftButtonDown.current && e.target.className == \"Trigger\") {\r\n      EventHandler();\r\n    }\r\n  };\r\n  const MouseDownHandler = (e) => {\r\n    // HexRef.current.ToggleclassName = \"Wall\";\r\n    if (\r\n      !LeftButtonDown.current &&\r\n      e.button == 0 &&\r\n      (e.target.className == \"Trigger\" || e.target.tagName == \"rect\")\r\n    ) {\r\n      if (val == StartNode) {\r\n        console.log(\"moving start\");\r\n        dispatch(MoveingStart(true));\r\n      } else if (val == TargetNode) {\r\n        console.log(\"moving target\");\r\n        dispatch(MoveingTarget(true));\r\n      } else if (val == PortalNode1) {\r\n        console.log(\"moving portal1\");\r\n        dispatch(MoveingPortal1(true));\r\n      } else if (val == PortalNode2) {\r\n        console.log(\"moving portal2\");\r\n        dispatch(MoveingPortal2(true));\r\n      } else {\r\n        EventHandler();\r\n      }\r\n      // LeftButtonDown.current = true;\r\n    }\r\n  };\r\n  const MouseUpHandler = () => {\r\n    if (movingStart) {\r\n      console.log(\"stoped moving\");\r\n      dispatch(MoveingStart(false));\r\n    }\r\n    if (movingTarget) {\r\n      console.log(\"stoped moving\");\r\n      dispatch(MoveingTarget(false));\r\n    }\r\n    if (movingPortal1) {\r\n      console.log(\"stoped moving\");\r\n      dispatch(MoveingPortal1(false));\r\n    }\r\n    if (movingPortal2) {\r\n      console.log(\"stoped moving\");\r\n      dispatch(MoveingPortal2(false));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (val == WallTransition) {\r\n      const endTime = new Date().getTime() + 300;\r\n      const AnimationTimeout = () => {\r\n        const currentTime = new Date().getTime();\r\n        if (currentTime > endTime) {\r\n          dispatch(FixAsWall({ i, j }));\r\n        } else {\r\n          window.requestAnimationFrame(AnimationTimeout);\r\n        }\r\n      };\r\n      // kick it all off\r\n      window.requestAnimationFrame(AnimationTimeout);\r\n    }\r\n  }, [val]);\r\n\r\n  return (\r\n    <div\r\n      // onClick={ClickHandler}\r\n      onMouseOver={OverHandler}\r\n      onMouseDown={MouseDownHandler}\r\n      onMouseUp={MouseUpHandler}\r\n    >\r\n      {/* {console.log(\"rerendered\")} */}\r\n      <Hex {...remainingProps} val={val} Ref={HexRef}></Hex>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MemorisexHex;\r\n"],"sourceRoot":""}